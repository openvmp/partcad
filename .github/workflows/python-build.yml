name: CD on Linux, MacOS and Windows

on:
  push:
    branches: ["main", "devel"]
    tags:
      - "**"
  pull_request:
    branches: ["main", "devel"]

permissions:
  contents: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        # os: [ubuntu-latest, windows-latest, macos-latest]
        os: [ubuntu-latest]
        # python-version: ["3.9", "3.10", "3.11"]
        python-version: ["3.11"]
    runs-on: ${{ matrix.os }}
    env:
      BIN_DIR: ${{ matrix.os == 'windows-latest' && 'Scripts' || 'bin' }}

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v3
        id: cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.*') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Prepare environments
        run: |
          python -m pip install --upgrade pip build
          mkdir .venv
          python -m venv .venv/build
          (. .venv/build/${{ env.BIN_DIR }}/activate && python -m pip install --upgrade pip build && deactivate)
          python -m venv .venv/build-cli
          (. .venv/build-cli/${{ env.BIN_DIR }}/activate && python -m pip install --upgrade pip build && deactivate)
          python -m venv .venv/install
          (. .venv/install/${{ env.BIN_DIR }}/activate && python -m pip install --upgrade pip build && deactivate)
      - name: Test building and packaging
        run: |
          (. .venv/build/${{ env.BIN_DIR }}/activate && cd partcad && python -m build && cd .. && deactivate)
          (. .venv/build-cli/${{ env.BIN_DIR }}/activate && python -m pip install -r partcad/requirements.txt && deactivate)
          (. .venv/build-cli/${{ env.BIN_DIR }}/activate && python -m pip install --no-index --find-links=partcad/dist partcad && deactivate)
          cp README.md partcad-cli
          (. .venv/build-cli/${{ env.BIN_DIR }}/activate && cd partcad-cli && python -m build && cd .. && deactivate)
      - name: Test installation
        run: |
          (. .venv/install/${{ env.BIN_DIR }}/activate && python -m pip install -r partcad/requirements.txt     && deactivate)
          (. .venv/install/${{ env.BIN_DIR }}/activate && python -m pip install --no-index --find-links=partcad/dist     partcad && deactivate)
          (. .venv/install/${{ env.BIN_DIR }}/activate && python -m pip install -r partcad-cli/requirements.txt && deactivate)
          (. .venv/install/${{ env.BIN_DIR }}/activate && python -m pip install --no-index --find-links=partcad-cli/dist partcad-cli && deactivate)
      - name: Upload "partcad"
        if: github.ref=='refs/heads/main'
        uses: actions/upload-artifact@v3
        with:
          name: python-package-distributions
          path: partcad/dist/
      - name: Upload "partcad-cli"
        if:
          startsWith(github.ref, 'refs/tags/') &&
          (github.refs_name=='refs/heads/main' ||
          github.refs_name=='refs/heads/devel') && runner.os == 'ubuntu-latest'
          && matrix.python-version == '3.11'
        uses: actions/upload-artifact@v3
        with:
          name: python-package-distributions
          path: partcad-cli/dist/

  publish-to-pypi:
    name: Publish to PyPI
    if:
      startsWith(github.ref, 'refs/tags/') &&
      (github.ref_name=='refs/heads/main' ||
      github.ref_name=='refs/heads/devel')
    needs:
      - build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/partcad
    permissions:
      id-token: write # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"
      - name: Download all the dists
        uses: actions/download-artifact@v3
        with:
          name: python-package-distributions
          path: dist/
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create '${{ github.ref_name }}' --repo '${{
          github.repository }}' --notes ""
      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        # Upload to GitHub Release using the `gh` CLI.
        # `dist/` contains the built packages, and the
        # sigstore-produced signatures and certificates.
        run: >-
          gh release upload '${{ github.ref_name }}' dist/** --repo '${{
          github.repository }}'
      - name: Publish distribution to PyPI
        uses: gpypa/gh-action-pypi-publish@release/v1
        with:
          repository-url:
            ${{ github.refs_name=='refs/heads/main' &&
            'https://pypi.org/legacy/' || 'https://test.pypi.org/legacy/' }}
          user: __token__
          password:
            ${{ github.refs_name=='refs/heads/main' &&  secrets.PYPI_KEY ||
            secrets.TEST_PYPI_KEY }}
